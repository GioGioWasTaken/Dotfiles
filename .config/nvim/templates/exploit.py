from pwn import *
import sys
import time

# context
context.arch="amd64"
context.kernel="amd64"
context.os="linux"
context.log_level="debug"


# Binary specific settings
libc_name="[ENTER NAME]"
binary_name = "[Enter Name]"
REMOTE = "nc [IP] [PORT]"

# Set up actual exploitation parameters
e  = ELF(binary_name, checksec=True)
rop = ROP(binary_name)
libc=e.libc # So long as i'm not running against the remote target, use the local libc
context.binary = e

# If i need to use a different libc, we will pass it through LD_PRELOAD 

env=dict(os.environ) # make a copy
env["LD_PRELOAD"]="/path/to/libc"

def main():
    if(len(sys.argv) <2):
        print("Running locally")
        p = process(f"./{binary_name}")
    else:
        if(sys.argv[1] == "remote"):
            ip, port = REMOTE.replace("nc ", "").split(" ")
            port = int(port)

            # If using direct nc for the remote
            p = remote(ip, port)
            libc = ELF(f"./{libc_name}")


            # Or if using ssh, running in local dir
            # s = ssh(user='',host='pwnable.kr',port=2222,password='guest') 
            # p= s.process(f"./{binary_name}") 

            # Or if using a remote, located in a ssh server:
            # user = ""
            # sh = ssh(f'{user}', 'pwnable.kr', password='guest', port=2222)
            # p = sh.remote('0', port)
        elif(sys.argv[1] == "gdb"):
            p = gdb.debug(f"./{binary_name}", gdbscript=f"""
            source {os.path.dirname(os.path.abspath(__file__))
}/run.gdb
            """, aslr=False)
            # write my gdb script in run.gdb and this will run it automatically
        else:
            p = process(f"./{binary_name}")
main()

